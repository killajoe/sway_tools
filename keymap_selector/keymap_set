#!/usr/bin/env bash

# keymap_set - Keyboard Layout Selector using dialog
#
# Copyright (C) 2025 Johannes Kamprad
# SPDX-License-Identifier: GPL-3.0-or-later
#
# Author: Johannes Kamprad (joekamprad)

set -euo pipefail

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() { echo -e "${GREEN}[INFO]${NC} $*" >&2; }
warn() { echo -e "${YELLOW}[WARN]${NC} $*" >&2; }
error() { echo -e "${RED}[ERROR]${NC} $*" >&2; }
info() { echo -e "${BLUE}[INFO]${NC} $*" >&2; }

cleanup() { [[ -f "/tmp/keymaps.txt" ]] && rm -f "/tmp/keymaps.txt"; }
trap cleanup EXIT

# --- Dependencies ---
check_dependencies() {
    local op="${1:-full}"
    local missing=()
    command -v localectl >/dev/null || missing+=("localectl")
    [[ "$op" == "full" ]] && ! command -v dialog >/dev/null && missing+=("dialog")
    if [[ ${#missing[@]} -gt 0 ]]; then
        error "Missing dependencies: ${missing[*]}"
        exit 1
    fi
}

# --- Current settings ---
get_current_keymap() {
    local cur
    cur=$(localectl status | awk '/VC Keymap/ {print $3}')
    echo "${cur:---}"
}

get_current_x11_layout() {
    local cur
    cur=$(localectl status | awk '/X11 Layout/ {print $3}')
    echo "${cur:---}"
}

get_current_locale() {
    local cur
    cur=$(localectl status | awk '/System Locale/ {print $3}')
    echo "${cur:---}"
}

show_current_settings() {
    info "Current settings:"
    echo "  VC Keymap : $(get_current_keymap)"
    echo "  X11 Layout: $(get_current_x11_layout)"
    echo "  Locale    : $(get_current_locale)"
}

# --- Generate keymap list ---
generate_keymap_list() {
    local tmp="/tmp/keymaps.txt"
    log "Fetching available VC keymaps..."
    localectl list-keymaps > "$tmp" 2>/dev/null || { error "Failed to fetch keymaps"; return 1; }
    log "Found $(wc -l < "$tmp") VC keymaps"
}

show_keymap_dialog() {
    local tmp="/tmp/keymaps.txt"
    local args=()
    local cur
    cur=$(get_current_keymap)
    args=(--title "Keyboard Layout Selector" --cancel-label "Cancel" --ok-label "Select" \
          --default-item "$cur" --menu "Choose a keyboard layout:\nCurrent: $cur" 20 60 10)
    while IFS= read -r k; do [[ -n "$k" ]] && args+=("$k" "$k"); done < "$tmp"
    local sel
    sel=$(dialog "${args[@]}" 2>&1 >/dev/tty) && echo "$sel"
}

# --- Create systemd-localed vconsole.conf ---
create_vconsole_conf() {
    local vc="$1" x11="$2" model="${3:-pc105}" variant="${4:-}" options="${5:-}" path="${6:-/tmp/vconsole.conf}"

    cat > "$path" << EOF
# Written by keymap_set
KEYMAP=$vc
XKBLAYOUT=$x11
XKBMODEL=$model
XKBVARIANT=$variant
XKBOPTIONS=$options
EOF

    log "vconsole.conf generated at $path"
}

# --- Temporary console testing ---
test_keymap_console() {
    local keymap="$1"
    local orig
    orig=$(get_current_keymap)
    log "Applying temporary keymap '$keymap' for console testing..."
    sudo loadkeys "$keymap"
    echo
    echo "Type some characters to test the keyboard. Press Enter when done."
    read -r dummy

    echo -n "Keep this layout permanently? [y/N/r]: "
    read -r resp
    case "$resp" in
        [Yy]|[Yy][Ee][Ss])
            log "User confirmed layout '$keymap'. Applying system-wide..."
            return 0
            ;;
        [Rr])
            log "Reverting to original layout '$orig' and returning to selection..."
            sudo loadkeys "$orig"
            return 2
            ;;
        *)
            log "Reverting to original layout '$orig'"
            sudo loadkeys "$orig"
            return 1
            ;;
    esac
}

# --- Set X11 layout ---
set_x11_layout() {
    local layout="$1" model="${2:-pc105}" variant="${3:-}" options="${4:-}"
    sudo localectl set-x11-keymap "$layout" "$model" "$variant" "$options"
    log "X11 layout '$layout' applied"
}

# --- Set system locale ---
set_system_locale() {
    local locale="$1"
    sudo localectl set-locale LANG="$locale"
    log "System locale set to '$locale'"
}

# --- Interactive choice ---
handle_keymap_choice() {
    local vc="$1"

    echo -e "${BLUE}Do you want to apply layout or just generate vconsole.conf?${NC}"
    echo "  a = Apply (console + X11)"
    echo "  c = Create vconsole.conf only"
    echo -n "Choice [a/c]: "
    read -r choice

    case "$choice" in
        [Cc])
            local path
            echo -n "Enter path for vconsole.conf [/tmp/vconsole.conf]: "
            read -r path
            path="${path:-/tmp/vconsole.conf}"

            # Ask X11 settings
            local x11 model variant options
            echo -n "Enter X11 layout (default: $vc): "
            read -r x11
            x11="${x11:-$vc}"
            echo -n "Enter keyboard model (default: pc105): "
            read -r model
            model="${model:-pc105}"
            echo -n "Enter variant (optional): "
            read -r variant
            echo -n "Enter options (optional): "
            read -r options

            create_vconsole_conf "$vc" "$x11" "$model" "$variant" "$options" "$path"
            return 0
            ;;
        [Aa]|"")
            local res
            test_keymap_console "$vc"
            res=$?
            [[ $res -eq 0 ]] && sudo localectl set-keymap "$vc"
            # Ask X11 layout
            echo -n "Enter X11 layout to apply (default: same as VC '$vc'): "
            read -r x11
            x11="${x11:-$vc}"
            set_x11_layout "$x11"
            return $res
            ;;
        *)
            warn "Unknown choice, aborting"
            return 1
            ;;
    esac
}

set_keymap_interactive() {
    local keymap="$1"
    [[ -z "$keymap" ]] && return 1
    handle_keymap_choice "$keymap"
}

list_keymaps() { localectl list-keymaps; }
show_help() {
    cat << EOF
Usage: $(basename "$0") [OPTIONS]

Options:
  -h --help        Show this help
  -l --list        List all keymaps
  -c --current     Show current settings
  -s --set KEYMAP  Set keymap interactively
  -t --test KEYMAP Test keymap interactively (apply or config)
  -f --force KEYMAP Force set VC keymap + X11 layout immediately
  --locale LOCALE  Set system locale (LANG)
EOF
}

main() {
    case "${1:-}" in
        -h|--help) show_help; exit 0 ;;
        -l|--list) check_dependencies "minimal"; list_keymaps; exit 0 ;;
        -c|--current) check_dependencies "minimal"; show_current_settings; exit 0 ;;
        -s|--set) check_dependencies "full"; set_keymap_interactive "$2"; exit $? ;;
        -t|--test) check_dependencies "full"; set_keymap_interactive "$2"; exit $? ;;
        -f|--force) check_dependencies "full"; sudo localectl set-keymap "$2"; set_x11_layout "$2"; exit 0 ;;
        --locale) [[ -n "${2:-}" ]] && set_system_locale "$2"; exit 0 ;;
        "") check_dependencies "full" ;;
        *) error "Unknown option: $1"; show_help; exit 1 ;;
    esac

    # Interactive menu
    clear
    echo -e "${BLUE}=== Keyboard & Locale Selector ===${NC}"
    show_current_settings
    echo
    echo -n "Modify keyboard layout? [y/N]: "
    read -r resp
    [[ ! "$resp" =~ ^[Yy]([Ee][Ss])?$ ]] && { info "Cancelled"; exit 0; }

    generate_keymap_list || exit 1

    while true; do
        local sel
        if sel=$(show_keymap_dialog); then
            echo
            set_keymap_interactive "$sel"
            local res=$?
            case $res in
                0) info "Operation successful"; break ;;
                1) warn "Operation reverted"; break ;;
                2) info "Returning to selection..."; continue ;;
            esac
        else
            info "Cancelled"; break
        fi
    done
}

main "$@"
