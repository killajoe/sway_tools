#!/usr/bin/env bash

# keymap_set - Keyboard Layout Selector using dialog
#
# Copyright (C) 2025 Johannes Kamprad
# SPDX-License-Identifier: GPL-3.0-or-later
#
# Author: Johannes Kamprad (joekamprad)

set -euo pipefail

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() { echo -e "${GREEN}[INFO]${NC} $*" >&2; }
warn() { echo -e "${YELLOW}[WARN]${NC} $*" >&2; }
error() { echo -e "${RED}[ERROR]${NC} $*" >&2; }
info() { echo -e "${BLUE}[INFO]${NC} $*" >&2; }

cleanup() { [[ -f "/tmp/keymaps.txt" ]] && rm -f "/tmp/keymaps.txt"; }
trap cleanup EXIT

check_dependencies() {
    local op="${1:-full}"
    local missing=()
    command -v localectl >/dev/null || missing+=("localectl")
    [[ "$op" == "full" ]] && ! command -v dialog >/dev/null && missing+=("dialog")
    if [[ ${#missing[@]} -gt 0 ]]; then
        error "Missing required dependencies: ${missing[*]}"
        exit 1
    fi
}

get_current_keymap() {
    local current
    current=$(localectl status | awk '/X11 Layout/ {print $3}')
    [[ -z "$current" ]] && current=$(localectl status | awk '/VC Keymap/ {print $3}')
    echo "${current:-unknown}"
}

show_current_layout() {
    info "Current keyboard layout: $(get_current_keymap)"
}

generate_keymap_list() {
    local tmp="/tmp/keymaps.txt"
    log "Fetching available keyboard layouts..."
    localectl list-keymaps > "$tmp" 2>/dev/null || { error "Failed to fetch keymaps"; return 1; }
    log "Found $(wc -l < "$tmp") layouts"
}

show_keymap_dialog() {
    local tmp="/tmp/keymaps.txt"
    local args=()
    local cur
    cur=$(get_current_keymap)
    args=(--title "Keyboard Layout Selector" --cancel-label "Cancel" --ok-label "Select" \
          --default-item "$cur" --menu "Choose a keyboard layout:\nCurrent: $cur" 20 60 10)
    while IFS= read -r k; do
        [[ -n "$k" ]] && args+=("$k" "$k")
    done < "$tmp"
    local sel
    sel=$(dialog "${args[@]}" 2>&1 >/dev/tty) && echo "$sel"
}

ask_confirmation() {
    echo -e "${BLUE}Would you like to modify the keyboard layout?${NC} [y/N]: "
    read -r resp
    [[ "$resp" =~ ^[Yy]([Ee][Ss])?$ ]]
}

# --- Create vconsole.conf ---
create_vconsole_conf() {
    local keymap="$1"
    local path="${2:-/tmp/vconsole.conf}"
    cat > "$path" << EOF
KEYMAP=$keymap
FONT=Lat2-Terminus16
FONT_MAP=
EOF
    log "vconsole.conf generated at $path"
}

# --- Temporary console testing ---
test_keymap_console() {
    local keymap="$1"
    local orig
    orig=$(localectl status | awk '/VC Keymap/ {print $3}')

    log "Applying temporary keymap '$keymap' for testing..."
    sudo loadkeys "$keymap"

    echo
    echo "Type some characters to test the keyboard. Press Enter when done."
    read -r dummy

    echo -n "Keep this layout permanently? [y/N/r]: "
    read -r resp
    case "$resp" in
        [Yy]|[Yy][Ee][Ss])
            log "User confirmed layout '$keymap'. Applying system-wide..."
            sudo localectl set-keymap "$keymap"
            ;;
        [Rr])
            log "Reverting to original layout '$orig' and returning to selection..."
            sudo loadkeys "$orig"
            return 2
            ;;
        *)
            log "Reverting to original layout '$orig'"
            sudo loadkeys "$orig"
            return 1
            ;;
    esac
}

# --- Handle keymap choice ---
handle_keymap_choice() {
    local keymap="$1"
    local choice output_file

    echo -e "${BLUE}Do you want to apply the layout or create a config file?${NC}"
    echo "  a = Apply temporarily and optionally permanently"
    echo "  c = Create vconsole.conf only (no system change)"
    echo -n "Your choice [a/c]: "
    read -r choice

    case "$choice" in
        [Cc])
            echo -n "Enter path for vconsole.conf [/tmp/vconsole.conf]: "
            read -r output_file
            output_file="${output_file:-/tmp/vconsole.conf}"
            create_vconsole_conf "$keymap" "$output_file"
            return 0
            ;;
        [Aa]|"")
            test_keymap_console "$keymap"
            return $?
            ;;
        *)
            warn "Unknown choice, aborting"
            return 1
            ;;
    esac
}

set_keymap_direct() {
    local keymap="$1"
    if ! localectl list-keymaps | grep -q "^$keymap$"; then
        error "Invalid keymap: $keymap"
        return 1
    fi
    handle_keymap_choice "$keymap"
}

list_keymaps() {
    log "Available layouts:"
    localectl list-keymaps
}

show_help() {
    cat << EOF
Usage: $(basename "$0") [OPTIONS]

Options:
  -h, --help        Show this help
  -l, --list        List all keymaps
  -c, --current     Show current keymap
  -s, --set KEYMAP  Set keymap interactively
  -t, --test KEYMAP Test keymap interactively (apply or config)
  -f, --force KEYMAP Force set keymap system-wide
EOF
}

main() {
    case "${1:-}" in
        -h|--help)
            show_help
            exit 0
            ;;
        -l|--list)
            check_dependencies "minimal"
            list_keymaps
            exit 0
            ;;
        -c|--current)
            check_dependencies "minimal"
            show_current_layout
            exit 0
            ;;
        -s|--set)
            if [[ -z "${2:-}" ]]; then
                error "Keymap required"
                exit 1
            fi
            check_dependencies "minimal"
            set_keymap_direct "$2"
            exit $?
            ;;
        -t|--test)
            if [[ -z "${2:-}" ]]; then
                error "Keymap required"
                exit 1
            fi
            check_dependencies "minimal"
            handle_keymap_choice "$2"
            exit $?
            ;;
        -f|--force)
            if [[ -z "${2:-}" ]]; then
                error "Keymap required"
                exit 1
            fi
            check_dependencies "minimal"
            warn "Applying keymap without testing!"
            sudo localectl set-keymap "$2"
            log "Keymap '$2' applied system-wide"
            exit 0
            ;;
        "")
            check_dependencies "full"
            ;;
        *)
            error "Unknown option: $1"
            show_help
            exit 1
            ;;
    esac

    # Interactive menu
    clear
    echo -e "${BLUE}=== Keyboard Layout Selector ===${NC}"
    show_current_layout
    echo
    ask_confirmation || { info "Cancelled"; exit 0; }

    generate_keymap_list || exit 1

    while true; do
        local sel
        if sel=$(show_keymap_dialog); then
            echo
            handle_keymap_choice "$sel"
            local res=$?
            case $res in
                0) info "Operation successful. Exiting."; break ;;
                1) warn "Operation reverted. Exiting."; break ;;
                2) info "Returning to selection..."; continue ;;
            esac
        else
            info "Cancelled"; break
        fi
    done
}

main "$@"
