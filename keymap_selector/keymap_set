#!/usr/bin/env bash

# keymap_set - Keyboard Layout Selector using dialog
#
# Copyright (C) 2025 Johannes Kamprad
# SPDX-License-Identifier: GPL-3.0-or-later
#
# Author: Johannes Kamprad (joekamprad)

set -euo pipefail

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() { echo -e "${GREEN}[INFO]${NC} $*" >&2; }
warn() { echo -e "${YELLOW}[WARN]${NC} $*" >&2; }
error() { echo -e "${RED}[ERROR]${NC} $*" >&2; }
info() { echo -e "${BLUE}[INFO]${NC} $*" >&2; }

cleanup() { [[ -f "/tmp/keymaps.txt" ]] && rm -f "/tmp/keymaps.txt"; }
trap cleanup EXIT

check_dependencies() {
    local op="${1:-full}"
    local missing=()
    command -v localectl >/dev/null || missing+=("localectl")
    [[ "$op" == "full" ]] && ! command -v dialog >/dev/null && missing+=("dialog")
    if [[ ${#missing[@]} -gt 0 ]]; then
        error "Missing required dependencies: ${missing[*]}"
        exit 1
    fi
}

get_current_keymap() {
    local current
    current=$(localectl status | awk '/X11 Layout/ {print $3}')
    [[ -z "$current" ]] && current=$(localectl status | awk '/VC Keymap/ {print $3}')
    echo "${current:-unknown}"
}

show_current_layout() {
    info "Current keyboard layout: $(get_current_keymap)"
}

generate_keymap_list() {
    local tmp="/tmp/keymaps.txt"
    log "Fetching available keyboard layouts..."
    localectl list-keymaps > "$tmp" 2>/dev/null || { error "Failed to fetch keymaps"; return 1; }
    log "Found $(wc -l < "$tmp") layouts"
}

show_keymap_dialog() {
    local tmp="/tmp/keymaps.txt"
    local args=()
    local cur
    cur=$(get_current_keymap)
    args=(--title "Keyboard Layout Selector" --cancel-label "Cancel" --ok-label "Select" \
          --default-item "$cur" --menu "Choose a keyboard layout:\nCurrent: $cur" 20 60 10)
    while IFS= read -r k; do
        [[ -n "$k" ]] && args+=("$k" "$k")
    done < "$tmp"
    local sel
    sel=$(dialog "${args[@]}" 2>&1 >/dev/tty) && echo "$sel"
}

ask_confirmation() {
    echo -e "${BLUE}Would you like to modify the keyboard layout?${NC} [y/N]: "
    read -r resp
    [[ "$resp" =~ ^[Yy]([Ee][Ss])?$ ]]
}

# --- Safe interactive handler ---
handle_keymap_choice() {
    local keymap="$1"
    local original_console original_x11 choice output_file

    if [[ -n "$DISPLAY" ]]; then
        original_x11=$(setxkbmap -query | awk '/layout/ {print $2}')
        info "Detected X11 session. Original layout: $original_x11"
    else
        original_console=$(localectl status | awk '/VC Keymap/ {print $3}')
        info "Detected console session. Original layout: $original_console"
    fi

    echo -e "${BLUE}How do you want to proceed?${NC}"
    echo "  a = Apply on system (temporary test first, then permanent if confirmed)"
    echo "  c = Create config file only (safe, no system changes)"
    echo -n "Your choice [a/c]: "
    read -r choice

    case "$choice" in
        [Cc])
            echo -n "Enter path for keymap config file [/tmp/keymap.conf]: "
            read -r output_file
            output_file="${output_file:-/tmp/keymap.conf}"
            if [[ -n "$DISPLAY" ]]; then
                echo "layout: $keymap" > "$output_file"
                echo "original_layout: $original_x11" >> "$output_file"
            else
                echo "keymap: $keymap" > "$output_file"
                echo "original_keymap: $original_console" >> "$output_file"
            fi
            log "Keymap config written to $output_file"
            return 0
            ;;
        [Aa]|"")
            if [[ -n "$DISPLAY" ]]; then
                setxkbmap "$keymap"
                log "Temporary X11 layout '$keymap' applied"
            else
                sudo loadkeys "$keymap"
                log "Temporary console layout '$keymap' applied"
            fi

            echo
            echo -e "${BLUE}Test the keyboard layout. Does it work correctly?${NC} [y/N/r]"
            echo "  y = Keep layout permanently"
            echo "  n = Revert to original layout"
            echo "  r = Revert and choose a different layout"
            echo -n "Your choice: "
            read -r mode

            case "$mode" in
                [Yy]|[Yy][Ee][Ss])
                    log "User confirmed layout '$keymap'"
                    sudo localectl set-keymap "$keymap"
                    log "Layout '$keymap' applied system-wide"
                    return 0
                    ;;
                [Rr]|[Rr][Ee][Tt][Uu][Rr][Nn])
                    log "Reverting layout to original"
                    [[ -n "$DISPLAY" ]] && setxkbmap "$original_x11" || sudo loadkeys "$original_console"
                    return 2
                    ;;
                *)
                    log "Reverting layout to original"
                    [[ -n "$DISPLAY" ]] && setxkbmap "$original_x11" || sudo loadkeys "$original_console"
                    return 1
                    ;;
            esac
            ;;
        *)
            warn "Unknown choice, aborting"
            return 1
            ;;
    esac
}

set_keymap_direct() {
    local keymap="$1"
    if ! localectl list-keymaps | grep -q "^$keymap$"; then
        error "Invalid keymap: $keymap"
        return 1
    fi
    handle_keymap_choice "$keymap"
}

list_keymaps() {
    log "Available layouts:"
    localectl list-keymaps
}

show_help() {
    cat << EOF
Usage: $(basename "$0") [OPTIONS]

Options:
  -h, --help        Show this help
  -l, --list        List all keymaps
  -c, --current     Show current keymap
  -s, --set KEYMAP  Set keymap interactively
  -t, --test KEYMAP Test keymap interactively (apply or config)
  -f, --force KEYMAP Force set keymap system-wide
EOF
}

# --- Main interactive menu ---
main() {
    case "${1:-}" in
        -h|--help)
            show_help
            exit 0
            ;;
        -l|--list)
            check_dependencies "minimal"
            list_keymaps
            exit 0
            ;;
        -c|--current)
            check_dependencies "minimal"
            show_current_layout
            exit 0
            ;;
        -s|--set)
            if [[ -z "${2:-}" ]]; then
                error "Keymap required"
                exit 1
            fi
            check_dependencies "minimal"
            set_keymap_direct "$2"
            exit $?
            ;;
        -t|--test)
            if [[ -z "${2:-}" ]]; then
                error "Keymap required"
                exit 1
            fi
            check_dependencies "minimal"
            handle_keymap_choice "$2"
            exit $?
            ;;
        -f|--force)
            if [[ -z "${2:-}" ]]; then
                error "Keymap required"
                exit 1
            fi
            check_dependencies "minimal"
            warn "Applying keymap without testing!"
            apply_keymap "$2" "false"
            exit $?
            ;;
        "")
            check_dependencies "full"
            ;;
        *)
            error "Unknown option: $1"
            show_help
            exit 1
            ;;
    esac

    # Interactive mode
    clear
    echo -e "${BLUE}=== Keyboard Layout Selector ===${NC}"
    show_current_layout
    echo
    ask_confirmation || { info "Cancelled"; exit 0; }

    generate_keymap_list || exit 1

    while true; do
        local sel
        if sel=$(show_keymap_dialog); then
            echo
            handle_keymap_choice "$sel"
            local res=$?
            case $res in
                0) info "Operation successful. Exiting."; break ;;
                1) warn "Operation reverted. Exiting."; break ;;
                2) info "Returning to selection..."; continue ;;
            esac
        else
            info "Cancelled"; break
        fi
    done
}

main "$@"
